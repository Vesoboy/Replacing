// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Replacing.DB;

#nullable disable

namespace Replacing.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231120150209_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Replacing.Models.EncryptedMessage", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EncryptedMessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceivedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.ToTable("EncryptedMessages");

                    b.HasData(
                        new
                        {
                            MessageId = new Guid("f0bb13c3-8e78-4020-8cc5-b98e4547a62f"),
                            EncryptedMessageText = " ",
                            OriginalMessage = " ",
                            ReceivedTime = new DateTime(2023, 11, 20, 18, 2, 9, 461, DateTimeKind.Local).AddTicks(129)
                        });
                });

            modelBuilder.Entity("Replacing.Models.ReplaceWord", b =>
                {
                    b.Property<string>("OldSymbol")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NewSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OldSymbol");

                    b.ToTable("ReplaceWords");

                    b.HasData(
                        new
                        {
                            OldSymbol = "а",
                            NewSymbol = "н"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
